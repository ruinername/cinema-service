import React from 'react';
import {FormLayout, Input, FormLayoutGroup, Select, Radio, Textarea, Checkbox, Link, Button, Slider, Div, FormStatus, Spinner} from '@vkontakte/vkui';
import connect from '@vkontakte/vkui-connect';

export class FeedBackForm extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      feedback: '',
      rate: 0,
      anon: false
    }
    this.submit = this.submit.bind(this);
    this.onChange = this.onChange.bind(this);
    this.anonF = this.anonF.bind(this);
    this.changeRate = this.changeRate.bind(this);
  }

  onChange(e) {
    const { name, value } = e.currentTarget;
    if(value.length <= 420) this.setState({ [name]: value, error: false});
  }

  anonF(){
    connect.send("VKWebAppTapticImpactOccurred", {"style": "heavy"});
    var val = !this.state.anon;
    this.setState({anon: val, error: false});
  }

  async submit(){
    await this.setState({loading: true});
    var response = await fetch('https://cinema.voloshinskii.ru/feedback/post', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({filmId: this.props.filmid, token: this.props.token, ...this.state})
    });
    await this.setState({loadeddata: true});
    var data = await response.json();
    console.log(data);
    if(data.ok){
      await connect.send("VKWebAppTapticNotificationOccurred", {"type": "success"});
      this.props.close();
    }
    else if(data.error === "Wrong request" || data.error === "empty"){
      await connect.send("VKWebAppTapticNotificationOccurred", {"type": "error"});
      await this.setState({loading: false, loadeddata: false, error: '–û—Ç–∑—ã–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –æ—Ü–µ–Ω–∫–æ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ'});
    }
  }

  changeRate(rate){
    if(rate.rate != this.state.rate) connect.send("VKWebAppTapticImpactOccurred", {"style": "medium"});
    this.setState({rate: rate.rate, error: false});
  }

  render() {
    const rateList = ["–±–µ–∑ –æ—Ü–µ–Ω–∫–∏", "ü§¨ (1)", "ü§Æ (2)", "ü§¢ (3)", "üòü (4)", "üòï (5)", "üòê (6)", "üôÇ (7)", "üòÉ (8)", "üëç (9)", "üòç (10)"];
    return (
      <div>
          {!this.state.loadeddata && <FormLayout>
            {!this.state.error && <FormStatus style={{zIndex: -1}} title="–ú–æ–¥–µ—Ä–∞—Ü–∏—è">
              –¢–≤–æ–π –æ—Ç–∑—ã–≤ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Å—Ä–∞–∑—É –∂–µ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –û–±—ã—á–Ω–æ –æ–Ω–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ —á–∞—Å–∞
            </FormStatus>
            }
            {this.state.error && <FormStatus style={{zIndex: -1}} state="error" title="–û—à–∏–±–∫–∞">
              {this.state.error}
            </FormStatus>
            }
            <div>
              <Textarea
                  type="text"
                  top="–û—Ç–∑—ã–≤"
                  name="feedback"
                  value={this.state.feedback}
                  onChange={this.onChange}
                  placeholder="–ù–∞–ø–∏—à–∏ –≤—Å—ë, —á—Ç–æ –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º —Ñ–∏–ª—å–º–µ. –í —Ä–∞–º–∫–∞—Ö –ø—Ä–∏–ª–∏—á–∏—è, –∫–æ–Ω–µ—á–Ω–æ –∂–µ"
              />
              <div style={{textAlign: 'right', marginRight: '12px', color: 'grey', marginTop: '5px'}}>{420 - this.state.feedback.length}</div>
            </div>
            <Slider
                min={0}
                max={10}
                onChange={rate => this.changeRate({rate})}
                top={`–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: ${rateList[this.state.rate]}`}
                step={1}
              />
            <Checkbox
              name="anon"
              onClick={this.anonF}
            >
              –ê–Ω–æ–Ω–∏–º–Ω–æ
            </Checkbox>
            <Button size="xl" disabled={this.state.loading || this.state.error} onClick={this.submit}>{this.state.loading? <Spinner size="regular"/> :"–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"}</Button>
          </FormLayout>}
      </div>
    );
  }
}
